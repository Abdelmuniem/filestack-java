plugins {
    id 'com.jfrog.bintray' version '1.7.3'
}

apply plugin: 'checkstyle'
apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'maven-publish'

sourceCompatibility = 1.7
version = getVersion()
group = 'com.filestack'

repositories {
    jcenter()
}

checkstyle {
    toolVersion '8.1'
}

// Tasks for creating artifact jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Publications define artifacts to upload to Bintray
publishing {
    publications {
        Maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

// TODO Update GitHub links when repo is made public
// Bintray publishing config
bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['Maven']
    publish = true
    pkg {
        repo = 'maven'
        userOrg = 'filestack'
        name = 'filestack-java'
        desc = 'Official Java SDK for Filestack.'

        publicDownloadNumbers = true
        licenses = ['Apache-2.0']

        websiteUrl = 'https://filestack.com'
        vcsUrl = 'https://github.com/filepicker/filestack-java.git'
        issueTrackerUrl = 'https://github.com/filepicker/filestack-java/issues'

        // githubRepo = 'filestack/filestack-java'
        // githubReleaseNotesFile = 'CHANGELOG.md'

        version {
            name = project.version
            vcsTag = project.version
            released = new Date()
        }
    }
}

// Get version string from VERSION text file
def getVersion() {
    return file(new File('VERSION')).text.trim()
}

// Create version properties file from VERSION text file
task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

dependencies {
    testImplementation 'junit:junit:4.12' // Testing

    compile 'com.squareup.okhttp3:okhttp:3.8.0' // Low-level HTTP client
    compile 'com.squareup.retrofit2:retrofit:2.3.0' // High-level HTTP client
    compile 'com.squareup.retrofit2:converter-gson:2.3.0' // GSON integration
    testImplementation 'com.squareup.retrofit2:retrofit-mock:2.3.0' // Testing / mocking tools

    compile 'com.google.code.gson:gson:2.8.1' // JSON serialization to Java objects
    compile ('com.google.guava:guava:22.0-android', { // Useful core libraries for Java
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })

    compile 'io.reactivex.rxjava2:rxjava:2.1.2' // Observable pattern for async methods
}
